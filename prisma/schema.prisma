// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  googleId     String?
  firstName    String        @map("first_name")
  lastName     String        @map("last_name")
  password     String?
  dateOfBirth  DateTime?     @map("date_of_birth")
  profileImage String?       @map("profile_image")
  role         Role          @default(USER)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  isActive     Boolean       @default(true)
  phone        String?
  ChatMembers  ChatMember[]
  Messages     Message[]
  Carts        Cart[]
  Booking      Booking[]
  PCBuild      PCBuild[]
  Wishlist     Wishlist[]
  UserAddress  UserAddress[]
  couponused   CouponUsed[]
  Order        Order[]
}

enum Role {
  ADMIN
  USER
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Order     Order[]

  @@map("user_addresses")
}

model Coupon {
  id         Int          @id @default(autoincrement())
  name       String
  startDate  DateTime
  expiry     DateTime
  discount   Int
  amount     Int
  status     Boolean      @default(true)
  couponused CouponUsed[]
}

model CouponUsed {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  couponId Int
}

model ChatMember {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int      @map("chat_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
}

model Chat {
  id               Int                @id @default(autoincrement())
  name             String
  ChatMembers      ChatMember[]
  Messages         Message[]
  ChatNotification ChatNotification[]
}

model Message {
  id               Int                @id @default(autoincrement())
  chat             Chat               @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId           Int                @map("chat_id")
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int                @map("user_id")
  message          String
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  ChatNotification ChatNotification[]
}

model ChatNotification {
  id          Int      @id @default(autoincrement())
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      Int      @map("chat_id")
  message     Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   Int?     @map("message_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isRead      Boolean  @default(false) @map("is_read")
  isAdminRead Boolean  @default(false) @map("is_admin_read")

  @@map("chat_notifications")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  status    String
  total     Decimal    @db.Decimal(10, 2)
  CartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int     @map("cart_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  @@map("cart_item")
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  price           Float
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  ProductImages   ProductImage[]
  categoryId      Int
  stock           Int
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  CartItems       CartItem[]
  OrderItems      OrderItem[]
  CPU             CPU[]
  Motherboard     Motherboard[]
  GPU             GPU[]
  Memory          Memory[]
  PowerSupply     PowerSupply[]
  Case            Case[]
  Drive           Drive[]
  CPUCooler       CPUCooler[]
  Monitor         Monitor[]
  Accessory       Accessory[]
  Wishlist        Wishlist[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
  imageUrl  String
  public_id String?

  @@map("product_image")
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  Products    Product[]

  @@map("product_category")
}

model Order {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int         @map("user_id")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  status         String      @default("Pending")
  paymentMethod  String?     @map("payment_method")
  paymentId      String?
  amount         String?
  currency       String?
  OrderItems     OrderItem[]
  orderAddress   UserAddress @relation(fields: [orderAddressId], references: [id], onDelete: Cascade)
  orderAddressId Int         @map("order_address_id")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int     @map("order_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
  quantity  Int

  @@map("order_item")
}

model Booking {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int           @map("user_id")
  queuePosition Int?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  bookingDate   DateTime      @map("booking_date")
  status        BookingStatus
  type          BookingType
  notes         String?
}

enum BookingType {
  CUSTOM_BUILD
  REPAIR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  EXPIRED
  REJECTED
}

model PCBuild {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int          @map("user_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  description   String?
  cpu           CPU?         @relation(fields: [cpuId], references: [id], onDelete: Cascade)
  cpuId         Int?         @map("cpu_id")
  motherboard   Motherboard? @relation(fields: [motherboardId], references: [id], onDelete: Cascade)
  motherboardId Int?         @map("motherboard_id")
  gpu           GPU?         @relation(fields: [gpuId], references: [id], onDelete: Cascade)
  gpuId         Int?         @map("gpu_id")
  memory        Memory?      @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  memoryId      Int?         @map("memory_id")
  powerSupply   PowerSupply? @relation(fields: [powerSupplyId], references: [id], onDelete: Cascade)
  powerSupplyId Int?         @map("power_supply_id")
  case          Case?        @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId        Int?         @map("case_id")
  drive         Drive?       @relation(name: "HDD", fields: [driveId], references: [id], onDelete: Cascade)
  driveId       Int?         @map("drive_id")
  ssd           Drive?       @relation(name: "SSD", fields: [ssdId], references: [id], onDelete: Cascade)
  ssdId         Int?         @map("ssd_id")
  cpuCooler     CPUCooler?   @relation(fields: [cpuCoolerId], references: [id], onDelete: Cascade)
  cpuCoolerId   Int?         @map("cpu_cooler_id")
  monitor       Monitor?     @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  monitorId     Int?         @map("monitor_id")
  totalPrice    Float
}

// ==========PC Parts==========
model CPU {
  id          Int       @id @default(autoincrement())
  name        String
  model       String
  socket      String
  cores       Int
  threads     Int
  baseClock   Float
  boostClock  Float?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  description String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int       @map("product_id")
  PCBuild     PCBuild[]

  @@map("cpu")
}

model Motherboard {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  socket    String
  chipset   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int       @map("product_id")
  PCBuild   PCBuild[]
}

model GPU {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int       @map("product_id")
  vram      Int
  power     Int
  PCBuild   PCBuild[]

  @@map("gpu")
}

model Memory {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int       @map("product_id")
  memory    Int
  busSpeed  Int       @map("bus_speed")
  type      String
  PCBuild   PCBuild[]
}

model PowerSupply {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int       @map("product_id")
  wattage   Int
  PCBuild   PCBuild[]

  @@map("power_supply")
}

model Case {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int       @map("product_id")
  size      String
  PCBuild   PCBuild[]
}

model Drive {
  id         Int         @id @default(autoincrement())
  name       String
  model      String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int         @map("product_id")
  size       String
  type       DriveType
  speed      String
  format     DriveFormat
  HDDPCBuild PCBuild[]   @relation(name: "HDD")
  SSDPCBuild PCBuild[]   @relation(name: "SSD")
}

enum DriveType {
  HDD
  SSD
}

enum DriveFormat {
  SATA
  M_2
}

model CPUCooler {
  id        Int           @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int           @map("product_id")
  socket    String
  radiator  Int
  type      CPUCoolerType
  PCBuild   PCBuild[]

  @@map("cpu_cooler")
}

enum CPUCoolerType {
  AIR
  LIQUID
}

model Monitor {
  id          Int       @id @default(autoincrement())
  name        String
  model       String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int       @map("product_id")
  size        Int
  resolution  String
  refreshRate Int       @map("refresh_rate")
  panelType   String    @map("panel_type")
  PCBuild     PCBuild[]
}

model Accessory {
  id              Int             @id @default(autoincrement())
  name            String
  description     String?
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int             @map("product_id")
  accessoriesType AccessoriesType
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
}

enum AccessoriesType {
  MOUSE
  KEYBOARD
  CHAIR
  HEADPHONE
  MICROPHONE
  SPEAKER
  OTHER
}
